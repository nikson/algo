#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <bits/stdc++.h>

#define N 1000
#define FOR(i,n) for(int i=0; i<n; i++)
#define MAX(a,b) ((a>b) ? a : b)
#define DIFF(a,b) (abs(a-b))
#define TEST 1

using namespace std;

typedef struct Item
{
    // item serial number
    int serial_no;
    // item name
    char item_name[100];
    // gross weight
    int gw;
    // volume weight
    int vw;
    // charge weight, max(gw, vw)
    int cw;
    // difference between g & v
    int gv_diff;
};

int max_net_profit;
int total_gw;
int total_vw;
int total_cw;
int total_gv_diff;

const int INF_MAX = 1 << 30;
const int MAX_SIZE = 100; //Maximum number of set of combination to print

int interval; // Maximum set split

map < vector <int> ,int > mp;
vector<vector <vector<int> > > store;

int total_items;
Item items[N];

int comp(const void *a, const void *b);
void read_inputs(int total);
void print_inputs(int total);
void generate_combination();
int ret_ans(vector<int> s,int cnt);
void store_combination(vector <int> s,int val,vector <vector<int> > pred,int cnt);
void solve();

int main()
{
#ifdef TEST
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
#endif // TEST

    max_net_profit = total_gw = total_vw = total_cw = total_gv_diff = 0;

    printf("Enter total number of Items: ");
    scanf("%d", &total_items);

    read_inputs(total_items);

    //qsort(items, total_items, sizeof(Item), comp);
    print_inputs(total_items);

    //Generating the combinations
    solve();

    return 0;
}

int comp(const void *a, const void *b)
{
    Item *x = (Item *)a;
    Item *y = (Item *)b;

    return (x->cw - y->cw);
}

void read_inputs(int total)
{
    char temp[100];
    Item t;

#ifdef TEST
    scanf(" %[^\n]", temp);     // first line, ignore, ignore defination
    scanf(" %[^\n]", temp);     // second line, ignore, -------
#endif

    FOR(i,total)
    {
        scanf("%d %s %d %d", &t.serial_no, t.item_name, &t.gw, &t.vw);
        t.gv_diff = DIFF(t.gw, t.vw);
        t.cw = MAX(t.gw, t.vw);
        items[i] = t;

        total_gw += t.gw;
        total_vw += t.vw;
        total_cw += t.cw;
        total_gv_diff += t.gv_diff;
    }
    max_net_profit = DIFF(total_cw, MAX(total_gw,total_vw));
}

void print_inputs(int total)
{
    Item t;

    printf("\n");

    FOR(i,total)
    {
        t = items[i];
        printf("%d\t%s\t%d\t%d\t%d\t%d\n", t.serial_no, &t.item_name, t.gw, t.vw, t.cw, t.gv_diff);
    }

    printf("\n");
    printf("Total \t gw \t gv \t gc \t gv_diff \t net_profit\n");
    printf("\t %d \t %d \t %d \t %d \t %d\n", total_gw, total_vw, total_cw, total_gv_diff, max_net_profit);
}

void solve()
{
    vector <int> s;
    vector <vector <int> > t,pred;
    for (int i=0;i<total_items;i++) s.push_back(i);
    int ans = max(total_gw,total_vw);
    int test = 0; interval = ((total_items%10) >= 5  || (total_items/10)==0) ? (total_items/10) + 1: total_items/10;
    //cout<<interval<<" nter"<<endl;
    printf("\nThe optimum charge cost is: %d\n",ans);
    printf("The maximum profit is: %d\n",total_cw - ans);
    store.clear();
    store_combination(s,ans,pred,0); //storing combinations to 'store' vector
    printf("The %d best combination(s)s for max profit are: \n\n\n",store.size());
    for (int i=0;i<store.size();i++)
    {
        t = store[i];
        printf("\t");
        for (int j=0;j<t.size();j++)
        {
            printf("{");
            for (int k=0;k<t[j].size();k++)
            {
                printf("%d",items[t[j][k]].serial_no);
                if (k != t[j].size()-1) printf(",");
            }
            printf("} ");
        }
        if (t.size()) printf("\n\n");
    }
    printf("\n");
}

int ret_ans(vector<int> s,int cnt)
{
    if (cnt>9) return 0;
    if (mp[s])
    {
        return mp[s];
    }
    int ret,a,b,i,j,k,l,m,n,len,c_gw = 0,c_vw = 0;
    len = s.size();
    if (len==1)
    {
        i = s[0] ;
        mp[s] = items[i].cw;
        return items[i].cw;
    }
    if (len < 1)
    {
        return 0;
    }
    ret = 0;
    for (i=0;i<len;i++)
    {
        j = s[i];
        c_gw += items[j].gw;
        c_vw += items[j].vw;
    }
    ret = max(c_gw,c_vw);
    mp[s] = ret;
    vector<int> sf,ss;
    for (i=0;i<len;i+=interval)
    {
        sf.clear(); ss.clear();
        for (j=0;j + i < len;j++)
        {
            //sf.clear(); ss.clear();
            if (!j)
            {
                for (k=j;k<=j+i;k++)
                {
                    sf.push_back(s[k]);
                }
                for (k=0;k<j;k++)
                {
                    ss.push_back(s[k]);
                }
                for (k=j+i+1;k<len;k++)
                {
                    ss.push_back(s[k]);
                }
            }
            else
            {
                a = sf[0];
                sf.push_back(s[j+i]);
                sf.erase(sf.begin());
                if (ss.size())
                    ss.erase(ss.begin());
                ss.push_back(a);
                sort(ss.begin(),ss.end());
            }
            a = ret_ans(sf,cnt+1);
            b = ret_ans(ss,cnt+1);
            cnt++;
        }
    }
    mp[s] = ret;
    return ret;
}

void store_combination(vector <int> s,int val,vector <vector<int> > pred,int cnt)
{
    if (cnt>9) return;
    if (store.size() >= MAX_SIZE ) return;
    int ret,i,j,k,a,b,len,c_gw = 0,c_vw = 0;
    len = s.size();
    vector <vector <int> > vt;
    if (len==1)
    {
        vt = pred;
        vt.push_back(s);
        store.push_back(vt);
        return;
    }
    if (len < 1)
    {
        return;
    }
    ret = 0;
    for (i=0;i<len;i++)
    {
        j = s[i];
        c_gw += items[j].gw;
        c_vw += items[j].vw;
    }
    ret = max(c_gw,c_vw);
    if (ret == val)
    {
        vt = pred;
        vt.push_back(s);
        store.push_back(vt);
        if (store.size() >= MAX_SIZE) return;
    }
    vector <int> sf,ss;
    bool flag = 0;
    for (i=0;i<len;i+=interval)
    {
        sf.clear(); ss.clear();
        for (j=0;j + i < len;j++)
        {
            if (!j)
            {
                for (k=j;k<=j+i;k++)
                {
                    sf.push_back(s[k]);
                }
                for (k=0;k<j;k++)
                {
                    ss.push_back(s[k]);
                }
                for (k=j+i+1;k<len;k++)
                {
                    ss.push_back(s[k]);
                }
            }
            else
            {
                a = sf[0];
                sf.push_back(s[j+i]);
                sf.erase(sf.begin());
                if (ss.size())
                    ss.erase(ss.begin());
                ss.push_back(a);
                sort(ss.begin(),ss.end());
            }
            a = ret_ans(sf,cnt);
            b = ret_ans(ss,cnt);
            ret = a + b;
            if (ret == val && store.size() < MAX_SIZE)
            {
                vt = pred;
                vt.push_back(sf);
                store_combination(ss,b,vt,cnt+1);
                cnt++;
            }
            if (store.size() >= MAX_SIZE) break;
        }
        if (store.size() >= MAX_SIZE) break;
    }
    return ;
}


/** Test cases

50
Item No -  Item Name - Gross Weight[G] - Volume weight[V] - Charge weight,[C=max(G,V)]
----------------------------------------------------------------------------
1 a 335 468
2 a 725 170
3 a 963 359
4 a 146 706
5 a 962 828
6 a 943 996
7 a 392 437
8 a 154 903
9 a 422 383
10 a 896 719
11 a 772 727
12 a 913 870
13 a 36 300
14 a 812 704
15 a 674 334
16 a 712 142
17 a 548 869
18 a 758 663
19 a 724 860
20 a 779 530
21 a 191 36
22 a 107 289
23 a 265 943
24 a 806 447
25 a 371 730
26 a 102 7
27 a 630 549
28 a 955 85
29 a 967 841
30 a 309 932
31 a 627 440
32 a 539 538
33 a 930 83
34 a 116 834
35 a 705 659
36 a 307 978
37 a 22 387
38 a 73 925
39 a 778 830
40 a 513 98
41 a 162 291
42 a 768 356
43 a 32 575
44 a 151 351
45 a 967 725
46 a 192 108
47 a 458 338
48 a 384 754
49 a 210 910
50 a 589 222
51 a 507 947
52 a 169 414
53 a 763 592
54 a 360 411
55 a 549 538
56 a 42 596
57 a 292 351
58 a 21 375
59 a 349 22
60 a 485 669
61 a 54 735
62 a 939 419
63 a 128 789
64 a 894 729
65 a 808 484
66 a 618 311
67 a 310 515
68 a 452 936
69 a 520 250
70 a 304 799
71 a 845 9
72 a 703 990
73 a 94 486
74 a 588 524
75 a 449 504
76 a 619 459
77 a 799 797
78 a 799 590
79 a 473 158
80 a 293 539
81 a 191 180
82 a 192 959
83 a 157 889
84 a 635 203
85 a 329 56
86 a 887 363
87 a 870 434
88 a 417 845
89 a 323 999
90 a 700 22
91 a 893 477
92 a 713 76
93 a 4 511
94 a 689 862
95 a 256 790
96 a 586 3
97 a 89 286
98 a 758 618
99 a 170 933
100 a 190 722
101 a 369 330
102 a 556 426
103 a 442 550
104 a 61 146
105 a 140 754
106 a 997 280
107 a 550 530
108 a 950 867
109 a 298 196
110 a 106 287
111 a 456 283
112 a 702 115
113 a 787 672
114 a 356 314
115 a 913 54
116 a 946 833
117 a 322 757
118 a 983 647
119 a 197 145
120 a 162 130
121 a 174 451
122 a 660 45
123 a 254 440
124 a 511 155
125 a 187 650
126 a 23 475
127 a 788 19
128 a 392 959
129 a 478 626
130 a 825 315
131 a 373 875
132 a 71 834
133 a 519 298
134 a 271 774
135 a 193 669
136 a 481 103
137 a 803 628
138 a 626 528
139 a 24 925
140 a 182 62
141 a 506 433
142 a 32 726
143 a 223 143
144 a 901 65
145 a 414 361
146 a 171 271
147 a 712 834
148 a 668 897
149 a 141 551
150 a 625 696
151 a 577 126
152 a 303 659
153 a 679 467
154 a 485 852
155 a 120 465
156 a 88 801
157 a 11 927
158 a 316 171
159 a 44 228
160 a 110 165
161 a 566 87
162 a 475 578
163 a 630 628
164 a 521 424
165 a 124 963
166 a 262 738
167 a 265 526
168 a 117 203
169 a 12 327
170 a 548 412
171 a 791 521
172 a 764 189
173 a 663 852
174 a 714 901
175 a 366 579
176 a 201 478
177 a 304 440
178 a 325 358
179 a 114 109
180 a 851 802
181 a 994 429
182 a 541 406
183 a 836 705
184 a 351 73
185 a 557 486
186 a 358 627
187 a 338 358
188 a 362 870
189 a 618 23
190 a 697 718
191 a 424 42
192 a 566 230
193 a 297 933
194 a 963 54
195 a 655 735
196 a 370 458
197 a 608 964
198 a 636 912
199 a 676 849
200 a 143 224
201 a 742 512
202 a 826 460
203 a 627 871
204 a 784 206
205 a 280 399
206 a 735 194
207 a 557 535
208 a 706 177
209 a 882 549
210 a 642 414
211 a 143 856
212 a 878 612
213 a 753 679
214 a 674 297
215 a 876 314
216 a 611 819
217 a 113 933
218 a 832 170
219 a 686 489
220 a 590 498
221 a 354 146
222 a 741 652
223 a 336 259
224 a 606 193
225 a 504 182
226 a 609 776
227 a 550 998
228 a 628 562
229 a 130 542
230 a 175 814
231 a 216 78
232 a 993 214
233 a 393 602
234 a 429 671
235 a 76 85
236 a 971 499
237 a 605 848
238 a 664 222
239 a 11 364
240 a 241 490
241 a 620 543
242 a 705 592
243 a 751 233
244 a 540 976
245 a 99 423
246 a 649 585
247 a 914 865
248 a 713 546
249 a 770 679
250 a 986 520
251 a 866 945
252 a 509 246
253 a 602 871
254 a 473 133
255 a 571 88
256 a 104 902
257 a 601 528
258 a 566 16
259 a 348 544
260 a 638 944
261 a 50 464
262 a 343 589
263 a 222 61
264 a 889 955
265 a 950 691
266 a 621 431
267 a 537 68
268 a 227 36
269 a 854 39
270 a 749 225
271 a 258 360
272 a 956 945
273 a 412 727
274 a 2 356
275 a 585 497
276 a 343 965
277 a 143 914
278 a 73 949
279 a 174 607
280 a 706 405
281 a 376 813
282 a 37 566
283 a 815 142
284 a 653 257
285 a 483 839
286 a 132 16
287 a 626 842
288 a 187 638
289 a 663 651
290 a 354 894
291 a 9 453
292 a 455 234
293 a 304 635
294 a 125 149
295 a 110 214
296 a 81 201
297 a 51 859
298 a 265 362
299 a 644 677
300 a 562 903
301 a 283 949
302 a 221 675
303 a 832 924
304 a 260 879
305 a 972 620
306 a 782 946
307 a 686 393
308 a 590 699
309 a 38 939
310 a 235 462
311 a 960 962
312 a 270 516
313 a 59 870
314 a 265 972
315 a 556 216
316 a 40 331
317 a 83 289
318 a 711 86
319 a 381 775
320 a 542 952
321 a 111 680
322 a 789 74
323 a 957 133
324 a 9 114
325 a 724 791
326 a 185 29
327 a 72 201
328 a 72 975
329 a 154 868
330 a 826 169
331 a 651 630
332 a 694 310
333 a 117 81
334 a 529 668
335 a 422 865
336 a 817 827
337 a 667 727
338 a 965 682
339 a 22 687
340 a 65 722
341 a 903 416
342 a 942 125
343 a 424 763
344 a 269 807
345 a 908 603
346 a 13 482
347 a 115 631
348 a 557 85
349 a 997 294
350 a 346 55
351 a 492 249
352 a 115 132
353 a 723 959
354 a 53 996
355 a 239 480
356 a 867 919
357 a 487 499
358 a 634 463
359 a 147 23
360 a 926 38
361 a 603 459
362 a 831 99
363 a 279 601
364 a 449 353
365 a 316 541
366 a 568 763
367 a 419 398
368 a 852 829
369 a 450 231
370 a 230 659
371 a 561 941
372 a 656 163
373 a 362 793
374 a 147 399
375 a 189 947
376 a 664 639
377 a 522 516
378 a 529 616
379 a 906 571
380 a 963 558
381 a 550 525
382 a 924 331
383 a 926 334
384 a 337 738
385 a 394 279
386 a 165 715
387 a 136 950
388 a 5 338
389 a 665 624
390 a 569 609
391 a 153 86
392 a 195 653
393 a 397 827
394 a 641 250
395 a 944 820
396 a 290 942
397 a 806 566
398 a 451 217
399 a 65 610
400 a 75 894
401 a 696 301
402 a 162 590
403 a 359 969
404 a 427 269
405 a 775 423
406 a 553 911
407 a 496 392
408 a 365 875
409 a 461 256
410 a 822 973
411 a 578 548
412 a 196 606
413 a 344 951
414 a 13 482
415 a 429 440
416 a 968 763
417 a 909 416
418 a 435 760
419 a 320 487
420 a 807 946
421 a 368 701
422 a 533 788
423 a 448 975
424 a 223 284
425 a 584 377
426 a 983 724
427 a 221 777
428 a 857 183
429 a 325 926
430 a 970 678
431 a 678 535
432 a 992 69
433 a 829 784
434 a 872 427
435 a 704 613
436 a 546 409
437 a 239 186
438 a 314 444
439 a 129 851
440 a 150 651
441 a 870 455
442 a 268 466
443 a 635 794
444 a 831 973
445 a 178 443
446 a 703 771
447 a 591 382
448 a 24 238
449 a 170 596
450 a 311 43
451 a 927 59
452 a 529 671
453 a 214 259
454 a 287 784
455 a 473 611
456 a 842 435
457 a 868 504
458 a 882 939
459 a 615 751
460 a 662 459
461 a 808 757
462 a 436 490
463 a 587 76
464 a 361 834
465 a 929 49
466 a 841 434
467 a 811 736
468 a 893 838
469 a 353 329
470 a 795 245
471 a 648 253
472 a 209 536
473 a 244 498
474 a 842 16
475 a 813 101
476 a 852 524
477 a 892 634
478 a 991 855
479 a 781 920
480 a 545 932
481 a 900 488
482 a 539 484
483 a 253 194
484 a 835 561
485 a 786 498
486 a 806 541
487 a 211 393
488 a 980 579
489 a 74 278
490 a 498 621
491 a 791 277
492 a 160 579
493 a 160 490
494 a 73 925
495 a 968 9
496 a 504 478
497 a 197 608
498 a 612 723
499 a 57 762
500 a 684 164
501 a 453 933
502 a 814 955
503 a 461 397
504 a 600 905
505 a 199 681
506 a 585 388
507 a 7 518
508 a 883 242
509 a 759 524
510 a 96 622
511 a 679 917
512 a 59 580
513 a 8 751
514 a 996 82
515 a 754 677
516 a 566 785
517 a 173 609
518 a 515 930
519 a 192 56
520 a 749 923
521 a 145 987
522 a 518 578
523 a 875 917
524 a 913 470
525 a 92 694
526 a 858 950
527 a 237 53
528 a 227 488
529 a 184 956
530 a 98 181
531 a 514 66
532 a 79 579
533 a 612 141
534 a 171 446
535 a 751 490
536 a 866 334
537 a 8 283
538 a 368 897
539 a 811 883
540 a 188 232
541 a 322 480
542 a 448 352
543 a 277 647
544 a 423 190
545 a 456 487
546 a 861 615
547 a 349 778
548 a 432 862
549 a 198 456
550 a 822 753
551 a 22 282
552 a 125 948
553 a 377 136
554 a 999 860
555 a 923 254
556 a 889 644
557 a 748 233
558 a 679 927
559 a 962 802
560 a 364 856
561 a 562 574
562 a 275 474
563 a 182 354
564 a 111 700
565 a 173 466
566 a 113 982
567 a 248 382
568 a 806 672
569 a 990 33
570 a 432 166
571 a 207 294
572 a 207 949
573 a 397 167
574 a 695 21
575 a 110 789
576 a 979 970
577 a 627 16
578 a 907 169
579 a 119 98
580 a 786 200
581 a 421 200
582 a 814 272
583 a 319 86
584 a 268 332
585 a 187 445
586 a 828 361
587 a 153 432
588 a 694 269
589 a 312 338
590 a 407 678
591 a 414 23
592 a 538 543
593 a 356 389
594 a 182 648
595 a 988 585
596 a 218 494
597 a 448 483
598 a 105 754
599 a 526 96
600 a 782 965
601 a 657 107
602 a 81 594
603 a 412 869
604 a 252 969
605 a 769 80
606 a 934 532
607 a 260 664
608 a 96 937
609 a 721 875
610 a 977 681
611 a 72 726
612 a 157 560
613 a 906 833
614 a 563 376
615 a 81 963
616 a 203 798
617 a 341 81
618 a 494 59
619 a 475 547
620 a 881 98
621 a 401 73
622 a 667 956
623 a 482 589
624 a 397 316
625 a 13 10
626 a 763 456
627 a 22 743
628 a 249 513
629 a 718 369
630 a 291 651
631 a 170 760
632 a 641 304
633 a 106 200
634 a 682 662
635 a 34 754
636 a 43 988
637 a 421 84
638 a 245 719
639 a 653 230
640 a 471 770
641 a 595 48
642 a 277 327
643 a 680 541
644 a 711 589
645 a 222 946
646 a 590 184
647 a 780 979
648 a 136 263
649 a 34 197
650 a 780 936
651 a 963 791
652 a 106 2
653 a 670 568
654 a 458 672
655 a 598 546
656 a 845 839
657 a 29 564
658 a 724 802
659 a 602 605
660 a 693 198
661 a 302 364
662 a 566 722
663 a 611 446
664 a 23 742
665 a 16 152
666 a 739 394
667 a 609 883
668 a 708 823
669 a 145 339
670 a 155 340
671 a 226 624
672 a 982 725
673 a 224 734
674 a 847 131
675 a 806 446
676 a 490 751
677 a 136 964
678 a 631 210
679 a 738 909
680 a 373 921
681 a 735 856
682 a 607 57
683 a 383 76
684 a 433 742
685 a 280 780
686 a 837 668
687 a 738 119
688 a 578 120
689 a 557 92
690 a 902 61
691 a 137 433
692 a 908 876
693 a 720 75
694 a 42 477
695 a 291 330
696 a 592 73
697 a 491 788
698 a 54 894
699 a 904 682
700 a 480 177
701 a 469 140
702 a 640 84
703 a 994 622
704 a 839 723
705 a 400 582
706 a 24 892
707 a 244 835
708 a 708 703
709 a 688 142
710 a 638 892
711 a 817 401
712 a 936 163
713 a 878 411
714 a 190 261
715 a 664 875
716 a 567 196
717 a 589 39
718 a 468 246
719 a 190 868
720 a 548 64
721 a 100 618
722 a 204 227
723 a 571 52
724 a 968 459
725 a 532 406
726 a 976 820
727 a 496 532
728 a 804 592
729 a 451 916
730 a 792 273
731 a 776 134
732 a 301 570
733 a 586 79
734 a 894 334
735 a 751 104
736 a 272 723
737 a 339 991
738 a 48 259
739 a 480 659
740 a 991 684
741 a 423 569
742 a 9 136
743 a 195 743
744 a 179 189
745 a 942 358
746 a 346 470
747 a 965 914
748 a 386 62
749 a 463 505
750 a 70 103
751 a 553 530
752 a 731 150
753 a 50 845
754 a 364 66
755 a 471 774
756 a 512 748
757 a 499 399
758 a 680 353
759 a 523 44
760 a 835 564
761 a 241 23
762 a 652 493
763 a 617 478
764 a 221 179
765 a 799 349
766 a 858 636
767 a 903 663
768 a 771 421
769 a 842 274
770 a 918 889
771 a 699 893
772 a 66 750
773 a 620 933
774 a 131 4
775 a 590 632
776 a 173 631
777 a 296 408
778 a 491 682
779 a 72 178
780 a 644 460
781 a 38 634
782 a 275 631
783 a 204 783
784 a 663 291
785 a 152 998
786 a 718 891
787 a 567 704
788 a 660 662
789 a 652 387
790 a 841 602
791 a 284 498
792 a 422 59
793 a 788 582
794 a 1000 288
795 a 139 980
796 a 462 531
797 a 541 206
798 a 623 460
799 a 99 761
800 a 615 482
801 a 597 494
802 a 539 747
803 a 477 539
804 a 372 918
805 a 759 753
806 a 66 256
807 a 35 402
808 a 549 394
809 a 194 793
810 a 104 138
811 a 695 212
812 a 499 628
813 a 880 249
814 a 932 150
815 a 599 876
816 a 600 437
817 a 732 444
818 a 435 862
819 a 817 968
820 a 867 705
821 a 224 309
822 a 668 793
823 a 931 470
824 a 91 815
825 a 605 744
826 a 196 475
827 a 590 159
828 a 890 810
829 a 819 41
830 a 27 976
831 a 67 504
832 a 571 841
833 a 642 396
834 a 110 652
835 a 86 84
836 a 687 251
837 a 129 382
838 a 863 278
839 a 873 566
840 a 429 886
841 a 479 890
842 a 266 926
843 a 779 46
844 a 521 856
845 a 135 774
846 a 337 676
847 a 738 2
848 a 591 975
849 a 81 72
850 a 283 146
851 a 574 719
852 a 999 38
853 a 718 163
854 a 48 540
855 a 232 104
856 a 859 840
857 a 395 646
858 a 273 646
859 a 73 863
860 a 239 481
861 a 609 543
862 a 126 278
863 a 79 402
864 a 737 170
865 a 139 940
866 a 664 427
867 a 725 576
868 a 962 701
869 a 449 3
870 a 17 685
871 a 994 508
872 a 260 945
873 a 644 59
874 a 120 678
875 a 892 42
876 a 916 624
877 a 842 930
878 a 537 616
879 a 701 760
880 a 242 94
881 a 228 449
882 a 325 225
883 a 886 134
884 a 863 171
885 a 910 85
886 a 86 924
887 a 194 25
888 a 766 413
889 a 678 408
890 a 791 705
891 a 622 892
892 a 191 735
893 a 87 999
894 a 425 622
895 a 255 377
896 a 928 109
897 a 367 69
898 a 601 439
899 a 291 319
900 a 557 340
901 a 479 633
902 a 240 788
903 a 828 21
904 a 442 989
905 a 3 643
906 a 947 105
907 a 834 510
908 a 534 762
909 a 386 805
910 a 261 843
911 a 344 621
912 a 114 188
913 a 935 592
914 a 762 657
915 a 960 412
916 a 371 739
917 a 8 508
918 a 102 952
919 a 442 959
920 a 413 14
921 a 94 61
922 a 677 403
923 a 267 374
924 a 529 276
925 a 470 762
926 a 108 730
927 a 954 452
928 a 520 571
929 a 495 408
930 a 384 441
931 a 608 410
932 a 472 361
933 a 948 655
934 a 230 524
935 a 888 767
936 a 471 633
937 a 523 667
938 a 554 161
939 a 260 92
940 a 630 688
941 a 46 318
942 a 453 389
943 a 834 467
944 a 632 920
945 a 777 268
946 a 321 315
947 a 470 8
948 a 843 723
949 a 261 464
950 a 631 794
951 a 377 44
952 a 118 627
953 a 172 621
954 a 155 965
955 a 665 694
956 a 213 1
957 a 477 552
958 a 878 944
959 a 386 362
960 a 145 435
961 a 505 564
962 a 309 889
963 a 124 431
964 a 347 75
965 a 319 982
966 a 592 293
967 a 462 124
968 a 331 462
969 a 292 370
970 a 118 180
971 a 596 915
972 a 868 937
973 a 910 454
974 a 504 982
975 a 884 817
976 a 403 386
977 a 682 158
978 a 867 311
979 a 478 172
980 a 239 765
981 a 116 48
982 a 658 312
983 a 172 54
984 a 531 741
985 a 791 321
986 a 587 999
987 a 632 490
988 a 611 389
989 a 260 920
990 a 120 610
991 a 301 717
992 a 459 854
993 a 807 594
994 a 273 855
995 a 55 295
996 a 230 147
997 a 560 429
998 a 689 422
999 a 686 34
1000 a 262 330

**/
